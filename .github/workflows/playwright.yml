name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Get Playwright version
      id: playwright-version
      run: |
        PLAYWRIGHT_VERSION=$(pip show playwright | grep Version | cut -d' ' -f2)
        echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install Playwright browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: python -m playwright install --with-deps

    - name: Install Playwright OS deps
      if: steps.playwright-cache.outputs.cache-hit == 'true'
      run: python -m playwright install-deps

    - name: Run tests
      run: pytest --alluredir=allure-results --tracing=retain-on-failure
      continue-on-error: true

    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: allure-results
        path: allure-results/

  generate-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
    - name: Download results
      uses: actions/download-artifact@v4
      with:
        name: allure-results
        path: allure-results

    - name: Checkout previous report
      uses: actions/checkout@v5
      with:
        ref: gh-pages
        path: previous-report
      continue-on-error: true

    - name: Copy history
      run: |
        if [ -d "previous-report/allure-report/history" ]; then
          mkdir -p allure-results/history
          cp -r previous-report/allure-report/history/* allure-results/history/
        fi

    - name: Install Allure CLI
      run: |
        ALLURE_VERSION=2.24.1
        wget https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.zip
        unzip allure-${ALLURE_VERSION}.zip -d $HOME/.allure
        echo "$HOME/.allure/allure-${ALLURE_VERSION}/bin" >> $GITHUB_PATH

    - name: Generate Allure report
      run: |
        allure generate allure-results --clean -o allure-report

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: allure-report

    - name: Parse stats
      run: |
        sudo apt-get update && sudo apt-get install -y jq
        STAT=$(jq . previous-report/allure-report/widgets/summary.json)
        PASSED=$(echo "$STAT" | jq .passed)
        FAILED=$(echo "$STAT" | jq .failed)
        SKIPPED=$(echo "$STAT" | jq .skipped)
        BROKEN=$(echo "$STAT" | jq .broken)
        echo "PASSED=$PASSED" >> $GITHUB_ENV
        echo "FAILED=$FAILED" >> $GITHUB_ENV
        echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
        echo "BROKEN=$BROKEN" >> $GITHUB_ENV

    - name: Send to Telegram
      run: |
        URL="https://${{ github.repository_owner }}.github.io/${{ github.repository }}/"
        TEXT="Allure report: $URL Passed: $PASSED, Failed: $FAILED, Skipped: $SKIPPED, Broken: $BROKEN"
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
          -d chat_id=2962410919 \
          -d text="$TEXT"
